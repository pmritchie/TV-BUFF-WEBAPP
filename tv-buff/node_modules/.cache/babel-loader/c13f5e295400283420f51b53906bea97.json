{"ast":null,"code":"var _jsxFileName = \"/Users/mikey/Documents/WDD359/tv-buff/src/pages/Description.js\";\nimport React, { Component } from 'react';\nimport Header from '../components/header/Header.js';\nimport defPic from '../components/images/default.jpeg';\nimport Card from '../components/card/Card';\n\nclass Description extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      actors: [],\n      shows: [],\n      isLoaded: false,\n      search: '',\n      human: false,\n      cast: [],\n      credits: []\n    };\n\n    this.detailed = (id, person) => {\n      const dID = {\n        dID: id,\n        human: person\n      };\n      localStorage.setItem('description', JSON.stringify(dID)); // reload page for new description\n\n      window.location.reload();\n    };\n  }\n\n  componentDidMount() {\n    const detailed = JSON.parse(localStorage.getItem('description')) || [];\n    console.log(detailed);\n\n    if (detailed.length === 0) {\n      this.setState({\n        isLoaded: true\n      });\n    } else {\n      this.fetchData(detailed);\n    }\n  }\n\n  fetchData(query) {\n    // check to see if human or false for layout\n    if (query.human === false) {\n      console.log('showtime');\n      fetch(\"https://api.tvmaze.com/shows/\".concat(query.dID, \"?embed[]=episodes&embed[]=cast\")).then(data => data.json()).then(stuff => {\n        const data = [];\n        const cArray = [];\n        data.push(stuff);\n        data.forEach(data => {\n          if (data.image == null) {\n            data.image = {\n              medium: \"\".concat(defPic),\n              large: './images/hikers.jpg'\n            };\n          }\n\n          if (data.rating.average == null) {\n            data.rating = {\n              average: 'N/A'\n            };\n          } // had to forLoop to get into cast array\n\n\n          for (let i = 0; i < data._embedded.cast.length; i++) {\n            console.log(data._embedded.cast[i].person.image);\n\n            if (data._embedded.cast[i].person.image == null) {\n              data._embedded.cast[i].person.image = {\n                medium: \"\".concat(defPic),\n                large: './images/hikers.jpg'\n              };\n            }\n          }\n\n          const c2Array = data._embedded.cast.map(actor => ({\n            id: \"\".concat(actor.person.id),\n            name: \"\".concat(actor.person.name),\n            image: \"\".concat(actor.person.image.medium)\n          }));\n\n          cArray.push(c2Array);\n        });\n        const sArray = data.map(show => ({\n          id: \"\".concat(show.id),\n          name: \"\".concat(show.name),\n          image: \"\".concat(show.image.medium),\n          rating: \"\".concat(show.rating.average),\n          summary: \"\".concat(show.summary),\n          premiered: \"\".concat(show.premiered),\n          fav: false\n        }));\n        return [sArray, cArray];\n      }).then(([shows, cast]) => this.setState({\n        shows,\n        cast,\n        isLoaded: true,\n        human: false\n      }));\n    } else {\n      // Change api over too - http://api.tvmaze.com/people/1/castcredits?embed=show\n      fetch(\"https://api.tvmaze.com/people/\".concat(query.dID, \"?embed=castcredits\")).then(data => {\n        const output = data.json();\n        return output;\n      }).then(stuff => {\n        // push object to array\n        const data1 = [];\n        data1.push(stuff);\n        const push = [];\n        data1.forEach(data => {\n          if (data.image === null) {\n            data.image = {\n              medium: \"\".concat(defPic),\n              large: './images/hikers.jpg'\n            };\n          }\n\n          data1.forEach(data => {\n            if (data.country === null) {\n              data.country = {\n                name: 'United States',\n                code: 'US',\n                timezone: 'America/Los_Angeles'\n              };\n            }\n          }); // for loop to get into credits\n\n          for (let i = 0; i < data._embedded.castcredits.length; i++) {\n            const showData = data._embedded.castcredits[i]._links.show.href.split('/');\n\n            const showID = showData.pop();\n            fetch(\"https://api.tvmaze.com/shows/\".concat(showID), {\n              method: 'get'\n            }).then(data => {\n              const output = data.json();\n              return output;\n            }).then(stuff => {\n              if (stuff.image === null) {\n                stuff.image = {\n                  medium: \"\".concat(defPic),\n                  large: './images/hikers.jpg'\n                };\n              }\n\n              const temp = [];\n              temp.push(stuff);\n              const sArray = temp.map(show => ({\n                id: \"\".concat(show.id),\n                name: \"\".concat(show.name),\n                image: \"\".concat(show.image.medium)\n              }));\n              return sArray;\n            }).then(cast => {\n              push.push(cast);\n            });\n          }\n        });\n        const pArray = data1.map(actor => ({\n          id: \"\".concat(actor.id),\n          name: \"\".concat(actor.name),\n          birthday: \"\".concat(actor.birthday),\n          image: \"\".concat(actor.image.medium),\n          country: \"\".concat(actor.country.name),\n          fav: false\n        }));\n        return [pArray, push];\n      }).then(([actors, credits]) => this.setState({\n        actors,\n        credits,\n        isLoaded: true,\n        human: true\n      }));\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          err = _this$state.err,\n          isLoaded = _this$state.isLoaded,\n          actors = _this$state.actors,\n          shows = _this$state.shows,\n          human = _this$state.human,\n          cast = _this$state.cast,\n          credits = _this$state.credits;\n    console.log(credits);\n    console.log(cast);\n\n    if (err) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Error:\", err.message);\n    }\n\n    if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      style: styles.div,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      style: styles.hContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row mt-5 justify-content-center\",\n      style: styles.headerRow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"col-6\",\n      style: styles.h1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Descriptions Page\"))), human && actors.length > 0 ? actors.map(actor => {\n      const name = actor.name,\n            birthday = actor.birthday,\n            image = actor.image,\n            country = actor.country,\n            id = actor.id;\n      return React.createElement(\"section\", {\n        className: \"container\",\n        style: styles.showC,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row m-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        id: id,\n        src: image,\n        alt: \"\".concat(name, \" picture\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }))), React.createElement(\"section\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Birthday:\", birthday), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, \"Country:\", country))), React.createElement(\"div\", {\n        className: \"row mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Cast Credits\")), React.createElement(\"div\", {\n        className: \"row \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, // will not loop.. array inception going on here\n      credits.map(show => {\n        const person = false;\n        const id = show.id,\n              name = show.name,\n              image = show.image;\n        return React.createElement(Card, {\n          style: styles.card,\n          alt: \"\".concat(name, \"picture\"),\n          key: id,\n          image: image,\n          title: name,\n          id: id,\n          addFav: () => this.addFav(id, person),\n          detailed: () => this.detailed(id, person),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        });\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }))));\n    }) : null, !human && shows.length > 0 ? shows.map(show => {\n      const id = show.id,\n            name = show.name,\n            summary = show.summary,\n            premiered = show.premiered,\n            rating = show.rating,\n            image = show.image;\n      return React.createElement(\"section\", {\n        className: \"container\",\n        style: styles.showC,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row m-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        id: id,\n        src: image,\n        alt: \"\".concat(name, \" picture\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }))), React.createElement(\"section\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"Premiered:\", premiered), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \"Rating:\", rating))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: styles.p,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, summary))), React.createElement(\"div\", {\n        className: \"row mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"section\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row justify-content-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \"Cast\")), React.createElement(\"div\", {\n        className: \"row \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, // display cards for actors on show\n      cast[0].map(actor => {\n        const person = true;\n        const id = actor.id,\n              name = actor.name,\n              image = actor.image;\n        console.log(actor);\n        return React.createElement(Card, {\n          style: styles.card,\n          alt: \"\".concat(name, \"picture\"),\n          key: id,\n          image: image,\n          title: name,\n          id: id,\n          addFav: e => this.addFav(id, person),\n          detailed: () => this.detailed(id, person),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        });\n      })), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }))));\n    }) : null);\n  }\n\n}\n\nexport default Description;\nconst styles = {\n  div: {\n    display: 'grid',\n    fontFamily: \"'Freckle Face', cursive\",\n    color: '#F9D780'\n  },\n  hContainer: {\n    width: '100%',\n    marginTop: '5rem',\n    marginBottom: '5rem'\n  },\n  showC: {\n    backgroundColor: 'white',\n    opacity: '.9',\n    justifyContent: 'center',\n    alignContent: 'center',\n    padding: '2rem',\n    borderRadius: '15px',\n    maxWidth: '70%'\n  },\n  img: {\n    maxWidth: '10rem',\n    maxHeight: 'rem'\n  },\n  hRow: {\n    marginTop: '10rem',\n    justifyContent: 'center'\n  },\n  nav: {\n    marginBottom: '20rem'\n  },\n  h1: {\n    fontSize: '64px'\n  },\n  card: {\n    fontFamily: \"'Freckle Face', cursive\",\n    color: '#F9D780'\n  }\n};","map":{"version":3,"sources":["/Users/mikey/Documents/WDD359/tv-buff/src/pages/Description.js"],"names":["React","Component","Header","defPic","Card","Description","state","actors","shows","isLoaded","search","human","cast","credits","detailed","id","person","dID","localStorage","setItem","JSON","stringify","window","location","reload","componentDidMount","parse","getItem","console","log","length","setState","fetchData","query","fetch","then","data","json","stuff","cArray","push","forEach","image","medium","large","rating","average","i","_embedded","c2Array","map","actor","name","sArray","show","summary","premiered","fav","output","data1","country","code","timezone","castcredits","showData","_links","href","split","showID","pop","method","temp","pArray","birthday","render","err","message","styles","div","hContainer","headerRow","h1","showC","card","addFav","p","e","display","fontFamily","color","width","marginTop","marginBottom","backgroundColor","opacity","justifyContent","alignContent","padding","borderRadius","maxWidth","img","maxHeight","hRow","nav","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../components/header/Header.js';\nimport defPic from '../components/images/default.jpeg';\nimport Card from '../components/card/Card';\n\n\nclass Description extends Component {\n    state = {\n      actors: [],\n      shows: [],\n      isLoaded: false,\n      search: '',\n      human: false,\n      cast: [],\n      credits: [],\n    }\n\n    componentDidMount() {\n      const detailed = JSON.parse(localStorage.getItem('description')) || [];\n      console.log(detailed);\n      if (detailed.length === 0) {\n        this.setState({ isLoaded: true });\n      } else { this.fetchData(detailed); }\n    }\n\n    fetchData(query) {\n      // check to see if human or false for layout\n      if (query.human === false) {\n        console.log('showtime');\n        fetch(`https://api.tvmaze.com/shows/${query.dID}?embed[]=episodes&embed[]=cast`)\n          .then(data => data.json())\n          .then(\n            (stuff) => {\n              const data = [];\n              const cArray = [];\n              data.push(stuff);\n              data.forEach((data) => {\n                if (data.image == null) {\n                  data.image = { medium: `${defPic}`, large: './images/hikers.jpg' };\n                }\n                if (data.rating.average == null) {\n                  data.rating = { average: 'N/A' };\n                }\n                // had to forLoop to get into cast array\n                for (let i = 0; i < data._embedded.cast.length; i++) {\n                  console.log(data._embedded.cast[i].person.image);\n                  if (data._embedded.cast[i].person.image == null) {\n                    data._embedded.cast[i].person.image = { medium: `${defPic}`, large: './images/hikers.jpg' };\n                  }\n                }\n                const c2Array = data._embedded.cast.map(actor => ({\n                  id: `${actor.person.id}`,\n                  name: `${actor.person.name}`,\n                  image: `${actor.person.image.medium}`,\n                }));\n                cArray.push(c2Array);\n              });\n              const sArray = data.map(show => ({\n                id: `${show.id}`,\n                name: `${show.name}`,\n                image: `${show.image.medium}`,\n                rating: `${show.rating.average}`,\n                summary: `${show.summary}`,\n                premiered: `${show.premiered}`,\n                fav: false,\n              }));\n              return [sArray, cArray];\n            },\n          ).then(([shows, cast]) => this.setState({\n            shows,\n            cast,\n            isLoaded: true,\n            human: false,\n          }));\n      } else {\n        // Change api over too - http://api.tvmaze.com/people/1/castcredits?embed=show\n        fetch(`https://api.tvmaze.com/people/${query.dID}?embed=castcredits`)\n          .then((data) => {\n            const output = data.json();\n            return output;\n          }).then((stuff) => {\n            // push object to array\n            const data1 = [];\n            data1.push(stuff);\n            const push = [];\n            data1.forEach((data) => {\n              if (data.image === null) {\n                data.image = { medium: `${defPic}`, large: './images/hikers.jpg' };\n              }\n              data1.forEach((data) => {\n                if (data.country === null) {\n                  data.country = { name: 'United States', code: 'US', timezone: 'America/Los_Angeles' };\n                }\n              });\n              // for loop to get into credits\n              for (let i = 0; i < data._embedded.castcredits.length; i++) {\n                const showData = data._embedded.castcredits[i]._links.show.href.split('/');\n                const showID = showData.pop();\n                fetch(`https://api.tvmaze.com/shows/${showID}`, { method: 'get' })\n                  .then((data) => {\n                    const output = data.json();\n                    return output;\n                  }).then((stuff) => {\n                    if (stuff.image === null) {\n                      stuff.image = { medium: `${defPic}`, large: './images/hikers.jpg' };\n                    }\n                    const temp = [];\n                    temp.push(stuff);\n                    const sArray = temp.map(show => ({\n                      id: `${show.id}`,\n                      name: `${show.name}`,\n                      image: `${show.image.medium}`,\n                    }));\n                    return sArray;\n                  }).then((cast) => {\n                    push.push(cast);\n                  });\n              }\n            });\n            const pArray = data1.map(actor => ({\n              id: `${actor.id}`,\n              name: `${actor.name}`,\n              birthday: `${actor.birthday}`,\n              image: `${actor.image.medium}`,\n              country: `${actor.country.name}`,\n              fav: false,\n            }));\n\n            return [pArray, push];\n          }).then(([actors, credits]) => this.setState({\n            actors,\n            credits,\n            isLoaded: true,\n            human: true,\n          }));\n      }\n    }\n\n      detailed = (id, person) => {\n        const dID = { dID: id, human: person };\n        localStorage.setItem('description', JSON.stringify(dID));\n        // reload page for new description\n        window.location.reload();\n      }\n\n      render() {\n        const {\n          err, isLoaded, actors, shows, human, cast, credits,\n        } = this.state;\n        console.log(credits);\n        console.log(cast);\n        if (err) {\n          return (\n            <div>\nError:\n              {err.message}\n            </div>\n          );\n        } if (!isLoaded) {\n          return <div>Loading...</div>;\n        }\n        return (\n          <div style={styles.div}>\n            <Header />\n            <div className=\"container\" style={styles.hContainer}>\n              <div className=\"row mt-5 justify-content-center\" style={styles.headerRow}>\n                <h1 className=\"col-6\" style={styles.h1}>Descriptions Page</h1>\n              </div>\n            </div>\n            {human && actors.length > 0 ? actors.map((actor) => {\n              const {\n                name, birthday, image, country, id,\n              } = actor;\n              return (\n                <section className=\"container\" style={styles.showC}>\n                  <div className=\"row m-3\">\n                    <section className=\"col\">\n                      <span><img id={id} src={image} alt={`${name} picture`} /></span>\n                    </section>\n                    <section className=\"col\">\n                      <h2>{name}</h2>\n                      <p>\nBirthday:\n                        {birthday}\n                      </p>\n                      <p>\nCountry:\n                        {country}\n                      </p>\n                    </section>\n                  </div>\n                  <div className=\"row mt-5\">\n                    <section className=\"container\">\n                      <div className=\"row justify-content-center\">\n                        <h3>Cast Credits</h3>\n                      </div>\n                      <div className=\"row \">\n                        {\n                                            // will not loop.. array inception going on here\n                                            credits.map((show) => {\n                                              const person = false;\n                                              const { id, name, image } = show;\n                                              return (\n                                                <Card\n                                                  style={styles.card}\n                                                  alt={`${name}picture`}\n                                                  key={id}\n                                                  image={image}\n                                                  title={name}\n                                                  id={id}\n                                                  addFav={() => this.addFav(id, person)}\n                                                  detailed={() => this.detailed(id, person)}\n                                                />\n                                              );\n                                            })\n                                        }\n\n                      </div>\n                      <div className=\"row\" />\n                    </section>\n                  </div>\n                </section>\n              );\n            }) : null\n                    }\n\n            {!human && shows.length > 0 ? shows.map((show) => {\n              const {\n                id, name, summary, premiered, rating, image,\n              } = show;\n              return (\n                <section className=\"container\" style={styles.showC}>\n                  <div className=\"row m-3\">\n                    <section className=\"col\">\n                      <span><img id={id} src={image} alt={`${name} picture`} /></span>\n                    </section>\n                    <section className=\"col\">\n                      <h2>{name}</h2>\n                      <p>\nPremiered:\n                        {premiered}\n                      </p>\n                      <p>\nRating:\n                        {rating}\n                      </p>\n                    </section>\n                  </div>\n                  <div className=\"row\">\n                    <section className=\"col\">\n                      <p style={styles.p}>\n                        {summary}\n                      </p>\n                    </section>\n                  </div>\n                  <div className=\"row mt-5\">\n                    <section className=\"container\">\n                      <div className=\"row justify-content-center\">\n                        <h3>Cast</h3>\n                      </div>\n                      <div className=\"row \">\n                        { // display cards for actors on show\n                                            cast[0].map((actor) => {\n                                              const person = true;\n                                              const { id, name, image } = actor;\n                                              console.log(actor);\n                                              return (\n                                                <Card\n                                                  style={styles.card}\n                                                  alt={`${name}picture`}\n                                                  key={id}\n                                                  image={image}\n                                                  title={name}\n                                                  id={id}\n                                                  addFav={e => this.addFav(id, person)}\n                                                  detailed={() => this.detailed(id, person)}\n                                                />\n                                              );\n                                            })\n                                        }\n\n                      </div>\n                      <div className=\"row\" />\n                    </section>\n                  </div>\n                </section>\n              );\n            }) : null\n\n                    }\n          </div>\n\n        );\n      }\n}\n\nexport default Description;\n\nconst styles = {\n  div: {\n    display: 'grid',\n\n    fontFamily: \"'Freckle Face', cursive\",\n    color: '#F9D780',\n\n  },\n  hContainer: {\n    width: '100%',\n    marginTop: '5rem',\n    marginBottom: '5rem',\n  },\n  showC: {\n    backgroundColor: 'white',\n    opacity: '.9',\n    justifyContent: 'center',\n    alignContent: 'center',\n    padding: '2rem',\n    borderRadius: '15px',\n    maxWidth: '70%',\n  },\n  img: {\n    maxWidth: '10rem',\n    maxHeight: 'rem',\n  },\n  hRow: {\n    marginTop: '10rem',\n    justifyContent: 'center',\n  },\n  nav: {\n    marginBottom: '20rem',\n  },\n  h1: {\n    fontSize: '64px',\n  },\n  card: {\n    fontFamily: \"'Freckle Face', cursive\",\n    color: '#F9D780',\n\n  },\n\n\n};\n"]},"metadata":{},"sourceType":"module"}