{"ast":null,"code":"var _jsxFileName = \"/Users/mikey/Documents/WDD359/tv-buff/src/pages/Description.js\";\nimport React, { Component } from 'react';\nimport Header from '../components/header/Header.js';\nimport defPic from '../components/images/default.jpeg';\nimport Card from '../components/card/Card';\n\nclass Description extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      actors: [],\n      shows: [],\n      isLoaded: false,\n      search: '',\n      human: false,\n      cast: [],\n      credits: []\n    };\n\n    this.detailed = (id, person) => {\n      let dID = {\n        dID: id,\n        human: person\n      };\n      localStorage.setItem('description', JSON.stringify(dID)); //reload page for new description\n\n      window.location.reload();\n    };\n  }\n\n  componentDidMount() {\n    let detailed = JSON.parse(localStorage.getItem(\"description\")) || [];\n    console.log(detailed);\n\n    if (detailed.length === 0) {\n      this.setState({\n        isLoaded: true\n      });\n    } else {\n      this.fetchData(detailed);\n    }\n  }\n\n  fetchData(query) {\n    //check to see if human or false for layout\n    if (query.human === false) {\n      console.log(\"showtime\");\n      fetch(\"https://api.tvmaze.com/shows/\".concat(query.dID, \"?embed[]=episodes&embed[]=cast\")).then(data => data.json()).then(stuff => {\n        let data = [];\n        let cArray = [];\n        data.push(stuff);\n        data.forEach(function (data) {\n          if (data.image == null) {\n            data.image = {\n              medium: \"\".concat(defPic),\n              large: \"./images/hikers.jpg\"\n            };\n          }\n\n          if (data.rating.average == null) {\n            data.rating = {\n              average: \"N/A\"\n            };\n          } //had to forLoop to get into cast array\n\n\n          for (let i = 0; i < data._embedded.cast.length; i++) {\n            console.log(data._embedded.cast[i].person.image);\n\n            if (data._embedded.cast[i].person.image == null) {\n              data._embedded.cast[i].person.image = {\n                medium: \"\".concat(defPic),\n                large: \"./images/hikers.jpg\"\n              };\n            }\n          }\n\n          let c2Array = data._embedded.cast.map(actor => ({\n            id: \"\".concat(actor.person.id),\n            name: \"\".concat(actor.person.name),\n            image: \"\".concat(actor.person.image.medium)\n          }));\n\n          cArray.push(c2Array);\n        });\n        let sArray = data.map(show => ({\n          id: \"\".concat(show.id),\n          name: \"\".concat(show.name),\n          image: \"\".concat(show.image.medium),\n          rating: \"\".concat(show.rating.average),\n          summary: \"\".concat(show.summary),\n          premiered: \"\".concat(show.premiered),\n          fav: false\n        }));\n        return [sArray, cArray];\n      }).then(([shows, cast]) => this.setState({\n        shows,\n        cast,\n        isLoaded: true,\n        human: false\n      }));\n    } else {\n      //Change api over too - http://api.tvmaze.com/people/1/castcredits?embed=show\n      fetch(\"https://api.tvmaze.com/people/\".concat(query.dID, \"?embed=castcredits\")).then(data => {\n        let output = data.json();\n        return output;\n      }).then(stuff => {\n        //push object to array\n        let data1 = [];\n        data1.push(stuff);\n        const push = [];\n        data1.forEach(function (data) {\n          if (data.image === null) {\n            data.image = {\n              medium: \"\".concat(defPic),\n              large: \"./images/hikers.jpg\"\n            };\n          }\n\n          data1.forEach(function (data) {\n            if (data.country === null) {\n              data.country = {\n                name: \"United States\",\n                code: \"US\",\n                timezone: \"America/Los_Angeles\"\n              };\n            }\n          }); // for loop to get into credits\n\n          for (let i = 0; i < data._embedded.castcredits.length; i++) {\n            const showData = data._embedded.castcredits[i]._links.show.href.split('/');\n\n            const showID = showData.pop();\n            fetch(\"https://api.tvmaze.com/shows/\".concat(showID), {\n              method: 'get'\n            }).then(data => {\n              let output = data.json();\n              return output;\n            }).then(stuff => {\n              if (stuff.image === null) {\n                stuff.image = {\n                  medium: \"\".concat(defPic),\n                  large: \"./images/hikers.jpg\"\n                };\n              }\n\n              let temp = [];\n              temp.push(stuff);\n              let sArray = temp.map(show => ({\n                id: \"\".concat(show.id),\n                name: \"\".concat(show.name),\n                image: \"\".concat(show.image.medium)\n              }));\n              return sArray;\n            }).then(cast => {\n              push.push(cast);\n            });\n          }\n        });\n        let pArray = data1.map(actor => ({\n          id: \"\".concat(actor.id),\n          name: \"\".concat(actor.name),\n          birthday: \"\".concat(actor.birthday),\n          image: \"\".concat(actor.image.medium),\n          country: \"\".concat(actor.country.name),\n          fav: false\n        }));\n        return [pArray, push];\n      }).then(([actors, credits]) => this.setState({\n        actors,\n        credits,\n        isLoaded: true,\n        human: true\n      }));\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          err = _this$state.err,\n          isLoaded = _this$state.isLoaded,\n          actors = _this$state.actors,\n          shows = _this$state.shows,\n          human = _this$state.human,\n          cast = _this$state.cast,\n          credits = _this$state.credits;\n    console.log(credits);\n    console.log(cast);\n\n    if (err) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Error: \", err.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"div\", {\n        style: styles.div,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        style: styles.hContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row mt-5 justify-content-center\",\n        style: styles.headerRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"col-6\",\n        style: styles.h1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Descriptions Page\"))), human && actors.length > 0 ? actors.map(actor => {\n        const name = actor.name,\n              birthday = actor.birthday,\n              image = actor.image,\n              country = actor.country,\n              id = actor.id;\n        return React.createElement(\"section\", {\n          className: \"container\",\n          style: styles.showC,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row m-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          className: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          id: id,\n          src: image,\n          alt: name + \" picture\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }))), React.createElement(\"section\", {\n          className: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, name), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, \"Birthday: \", birthday), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, \"Country: \", country))), React.createElement(\"div\", {\n          className: \"row mt-5\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row justify-content-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 176\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, \"Cast Credits\")), React.createElement(\"div\", {\n          className: \"row \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, //will not loop.. array inception going on here\n        credits.map(show => {\n          const person = false;\n          const id = show.id,\n                name = show.name,\n                image = show.image;\n          return React.createElement(Card, {\n            style: styles.card,\n            alt: name + \"picture\",\n            key: id,\n            image: image,\n            title: name,\n            id: id,\n            addFav: () => this.addFav(id, person),\n            detailed: () => this.detailed(id, person),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186\n            },\n            __self: this\n          });\n        })), React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }))));\n      }) : null, !human && shows.length > 0 ? shows.map(show => {\n        const id = show.id,\n              name = show.name,\n              summary = show.summary,\n              premiered = show.premiered,\n              rating = show.rating,\n              image = show.image;\n        return React.createElement(\"section\", {\n          className: \"container\",\n          style: styles.showC,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row m-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          className: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          id: id,\n          src: image,\n          alt: name + \" picture\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216\n          },\n          __self: this\n        }))), React.createElement(\"section\", {\n          className: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, name), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220\n          },\n          __self: this\n        }, \"Premiered: \", premiered), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221\n          },\n          __self: this\n        }, \"Rating: \", rating))), React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          className: \"col\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          style: styles.p,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          },\n          __self: this\n        }, summary))), React.createElement(\"div\", {\n          className: \"row mt-5\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231\n          },\n          __self: this\n        }, React.createElement(\"section\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row justify-content-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }, \"Cast\")), React.createElement(\"div\", {\n          className: \"row \",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          },\n          __self: this\n        }, //display cards for actors on show\n        cast[0].map(actor => {\n          const person = true;\n          const id = actor.id,\n                name = actor.name,\n                image = actor.image;\n          console.log(actor);\n          return React.createElement(Card, {\n            style: styles.card,\n            alt: name + \"picture\",\n            key: id,\n            image: image,\n            title: name,\n            id: id,\n            addFav: e => this.addFav(id, person),\n            detailed: () => this.detailed(id, person),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 243\n            },\n            __self: this\n          });\n        })), React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 258\n          },\n          __self: this\n        }))));\n      }) : null);\n    }\n  }\n\n}\n\nexport default Description;\nconst styles = {\n  div: {\n    display: \"grid\",\n    fontFamily: \"'Freckle Face', cursive\",\n    color: \"#F9D780\"\n  },\n  hContainer: {\n    width: \"100%\",\n    marginTop: \"5rem\",\n    marginBottom: \"5rem\"\n  },\n  showC: {\n    backgroundColor: \"white\",\n    opacity: '.9',\n    justifyContent: \"center\",\n    alignContent: \"center\",\n    padding: \"2rem\",\n    borderRadius: \"15px\",\n    maxWidth: \"70%\"\n  },\n  img: {\n    maxWidth: \"10rem\",\n    maxHeight: \"rem\"\n  },\n  hRow: {\n    marginTop: \"10rem\",\n    justifyContent: \"center\"\n  },\n  nav: {\n    marginBottom: \"20rem\"\n  },\n  h1: {\n    fontSize: \"64px\"\n  },\n  card: {\n    fontFamily: \"'Freckle Face', cursive\",\n    color: \"#F9D780\"\n  }\n};","map":{"version":3,"sources":["/Users/mikey/Documents/WDD359/tv-buff/src/pages/Description.js"],"names":["React","Component","Header","defPic","Card","Description","state","actors","shows","isLoaded","search","human","cast","credits","detailed","id","person","dID","localStorage","setItem","JSON","stringify","window","location","reload","componentDidMount","parse","getItem","console","log","length","setState","fetchData","query","fetch","then","data","json","stuff","cArray","push","forEach","image","medium","large","rating","average","i","_embedded","c2Array","map","actor","name","sArray","show","summary","premiered","fav","output","data1","country","code","timezone","castcredits","showData","_links","href","split","showID","pop","method","temp","pArray","birthday","render","err","message","styles","div","hContainer","headerRow","h1","showC","card","addFav","p","e","display","fontFamily","color","width","marginTop","marginBottom","backgroundColor","opacity","justifyContent","alignContent","padding","borderRadius","maxWidth","img","maxHeight","hRow","nav","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Header from '../components/header/Header.js';\nimport defPic from '../components/images/default.jpeg';\nimport Card from '../components/card/Card';\n\n\nclass Description extends Component{\n    state = {\n        actors: [],\n        shows: [],\n        isLoaded: false,\n        search: '',\n        human: false,\n        cast: [],\n        credits: []\n    }\n    componentDidMount(){\n        let detailed = JSON.parse(localStorage.getItem(\"description\")) || [];\n        console.log(detailed)\n        if(detailed.length === 0){\n            this.setState({isLoaded: true})\n        }else{this.fetchData(detailed)}\n    }\n\n    fetchData(query){\n        //check to see if human or false for layout\n        if(query.human === false){\n            console.log(\"showtime\");\n            fetch(`https://api.tvmaze.com/shows/${query.dID}?embed[]=episodes&embed[]=cast`)\n            .then(data => data.json())    \n            .then(\n                (stuff) => {\n                let data = [];\n                let cArray = [];\n                data.push(stuff)    \n                data.forEach(function(data){\n                    if(data.image == null){\n                      data.image = {medium: `${defPic}`, large: \"./images/hikers.jpg\"}\n                    }\n                    if(data.rating.average == null){\n                        data.rating = {average: \"N/A\"}\n                    }\n                    //had to forLoop to get into cast array\n                    for(let i = 0; i < data._embedded.cast.length; i++){\n                        console.log(data._embedded.cast[i].person.image)\n                        if(data._embedded.cast[i].person.image == null){\n                            data._embedded.cast[i].person.image = {medium: `${defPic}`, large: \"./images/hikers.jpg\"};\n                        }\n                    }\n                    let c2Array = data._embedded.cast.map(actor => ({\n                        id: `${actor.person.id}`,\n                        name: `${actor.person.name}`,\n                        image: `${actor.person.image.medium}`\n                    })) \n                    cArray.push(c2Array)\n                 })                \n                let sArray = data.map(show => ({\n                    id: `${show.id}`,\n                    name: `${show.name}`,\n                    image: `${show.image.medium}`,\n                    rating: `${show.rating.average}`,\n                    summary: `${show.summary}`,\n                    premiered: `${show.premiered}`,\n                    fav: false\n                  })) \n                 return [sArray, cArray]\n            }).then(([shows,cast]) => this.setState({\n                shows,\n                cast,\n                isLoaded:true,\n                human: false\n            }));\n        }else{\n            //Change api over too - http://api.tvmaze.com/people/1/castcredits?embed=show\n            fetch(`https://api.tvmaze.com/people/${query.dID}?embed=castcredits`)\n            .then((data) => {\n                let output = data.json()\n                return output\n            }).then((stuff) => {\n                //push object to array\n                let data1 = [];\n                data1.push(stuff) \n                const push = []\n                data1.forEach(function(data){\n                    if(data.image === null){\n                      data.image = {medium: `${defPic}`, large: \"./images/hikers.jpg\"}\n                    }\n                data1.forEach(function(data){\n                    if(data.country === null){\n                        data.country = {name: \"United States\", code: \"US\", timezone:\"America/Los_Angeles\"  };\n                    }\n                })\n                    // for loop to get into credits\n                    for(let i = 0; i < data._embedded.castcredits.length; i++){\n                        const showData = data._embedded.castcredits[i]._links.show.href.split('/')\n                        const showID = showData.pop()\n                        fetch(`https://api.tvmaze.com/shows/${showID}`,{method: 'get'})\n                        .then((data) =>{\n                            let output = data.json()\n                            return output\n                        }).then((stuff)=>{\n                            if(stuff.image === null){\n                                stuff.image = {medium: `${defPic}`, large: \"./images/hikers.jpg\"}\n                            }\n                            let temp = []\n                            temp.push(stuff);\n                            let sArray = temp.map(show => ({\n                                id: `${show.id}`,\n                                name: `${show.name}`,\n                                image: `${show.image.medium}`\n                            }))                  \n                            return sArray\n                        }).then((cast) =>{\n                            push.push(cast)\n                        })\n                    }\n                 })   \n                let pArray = data1.map(actor => ({\n                    id: `${actor.id}`,\n                    name: `${actor.name}`,\n                    birthday: `${actor.birthday}`,\n                    image: `${actor.image.medium}`,\n                    country: `${actor.country.name}`,\n                    fav: false\n                  })) \n                  \n                  return [pArray,push];\n                }).then(([actors,credits]) => this.setState({\n                    actors,\n                    credits,\n                    isLoaded:true,\n                    human: true\n                  }))\n        }        \n      }\n      detailed = (id,person) => {\n        let dID = {dID:id, human:person};\n        localStorage.setItem('description', JSON.stringify(dID));\n        //reload page for new description\n        window.location.reload()\n      }\n    render(){\n        \n        const { err, isLoaded, actors, shows, human, cast, credits} = this.state;\n        console.log(credits)\n        console.log(cast)\n        if (err) {\n            return <div>Error: {err.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return(\n                <div style={styles.div}>\n                    <Header />                \n                    <div className=\"container\" style={styles.hContainer}>   \n                        <div className=\"row mt-5 justify-content-center\" style={styles.headerRow}>\n                            <h1 className=\"col-6\" style={styles.h1}  >Descriptions Page</h1>\n                        </div>\n                    </div>\n                    {human && actors.length > 0 ? actors.map(actor => {\n                            const{ name, birthday, image, country, id} = actor;\n                        return(\n                            <section className=\"container\" style={styles.showC}>\n                                <div className=\"row m-3\">\n                                    <section className=\"col\">\n                                        <span><img id={id} src={image} alt={name+\" picture\"}></img></span>\n                                    </section>\n                                    <section className=\"col\">\n                                        <h2>{name}</h2>\n                                        <p>Birthday: {birthday}</p>\n                                        <p>Country: {country}</p>\n                                    </section>\n                                </div>\n                                <div className=\"row mt-5\">\n                                    <section className=\"container\">\n                                        <div className=\"row justify-content-center\">\n                                            <h3>Cast Credits</h3>\n                                        </div>\n                                        <div className=\"row \">\n                                         {\n                                            //will not loop.. array inception going on here\n                                            credits.map(show => {\n                                                const person = false;\n                                                const{id, name, image} = show;\n                                                return(\n                                                    <Card \n                                                    style={styles.card}\n                                                    alt={name+ \"picture\"}\n                                                    key={id}\n                                                    image={image}\n                                                    title={name}\n                                                    id={id}\n                                                    addFav={()=>this.addFav(id,person)} \n                                                    detailed={()=>this.detailed(id,person)}\n                                                    />\n                                                )\n                                            })\n                                        }\n                                          \n                                        </div>\n                                        <div className=\"row\"></div>\n                                    </section>\n                                </div>                                \n                            </section>      \n                        )\n            \n                        }) :null \n                    }\n              \n                    {!human && shows.length > 0 ? shows.map(show => {\n                        const{id, name, summary, premiered, rating, image} = show;\n                        return(\n                            <section className=\"container\" style={styles.showC}>\n                                <div className=\"row m-3\">\n                                    <section className=\"col\">\n                                        <span><img id={id} src={image} alt={name+\" picture\"}></img></span>\n                                    </section>\n                                    <section className=\"col\">\n                                        <h2>{name}</h2>\n                                        <p>Premiered: {premiered}</p>\n                                        <p>Rating: {rating}</p>\n                                    </section>\n                                </div>\n                                <div className=\"row\">\n                                    <section className=\"col\">\n                                        <p style={styles.p}>\n                                        {summary}\n                                        </p>\n                                    </section>\n                                </div>\n                                <div className=\"row mt-5\">\n                                    <section className=\"container\">\n                                        <div className=\"row justify-content-center\">\n                                            <h3>Cast</h3>\n                                        </div>\n                                        <div className=\"row \">\n                                        { //display cards for actors on show\n                                            cast[0].map(actor => {\n                                                const person = true;\n                                                const{id, name, image} = actor;\n                                                console.log(actor)\n                                                return(\n                                                    <Card \n                                                    style={styles.card}\n                                                    alt={name+ \"picture\"}\n                                                    key={id}\n                                                    image={image}\n                                                    title={name}\n                                                    id={id}\n                                                    addFav={(e)=>this.addFav(id,person,)} \n                                                    detailed={()=>this.detailed(id,person)}\n                                                    />\n                                                )\n                                            })\n                                        }\n                                          \n                                        </div>\n                                        <div className=\"row\"></div>\n                                    </section>\n                                </div>                                \n                            </section>\n                            )\n            \n                        }) :null\n                  \n                    }   \n                </div>\n               \n            )\n                 \n         }        \n    }\n}\n\nexport default Description;\n\nconst styles = {\n    div: {\n        display: \"grid\",\n       \n        fontFamily: \"'Freckle Face', cursive\",\n        color: \"#F9D780\",\n        \n    },\n    hContainer:{\n        width: \"100%\",\n        marginTop: \"5rem\",\n        marginBottom: \"5rem\"\n    },\n    showC :{\n        backgroundColor: \"white\",\n        opacity: '.9',\n        justifyContent: \"center\",\n        alignContent: \"center\",\n        padding: \"2rem\",\n        borderRadius: \"15px\",\n        maxWidth: \"70%\"\n    },\n    img: {\n        maxWidth: \"10rem\",\n        maxHeight: \"rem\"\n    },\n    hRow: {\n        marginTop:\"10rem\",\n        justifyContent: \"center\"\n    },\n    nav:{\n        marginBottom: \"20rem\"\n    },\n    h1:{\n        fontSize: \"64px\"\n    },\n    card: {\n        fontFamily: \"'Freckle Face', cursive\",\n        color: \"#F9D780\",\n          \n      },\n\n    \n}"]},"metadata":{},"sourceType":"module"}